openapi: 3.0.0
info:
  title: Orders Demo App API
  description: Adds and Reads orders
  version: 1.0.0
tags:
  - name: Orders
    description: |
      Operations to manage maintenance of orders.
x-amazon-apigateway-cors:
  allowOrigins:
    - '*'
  allowMethods:
    - GET
    - POST
  allowHeaders:
    - authorization
    - content-type
  maxAge: 3600

paths:
  /orders:
    post:
      summary: Add a new order
      description: Create a new order with any details you like. This will return an id
      tags:
        - Orders
      responses:
        201:
          $ref: '#/components/responses/Created'
        500:
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderModel'

  /orders/{orderId}:
    parameters:
      - $ref: '#/components/parameters/orderId'
    get:
      summary: Get Order details
      description: Returns all the details for an order with the provided id
      tags:
        - Orders
      responses:
        200:
          description: The request succeeded and the order is included in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderModel'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

#    put:
#      summary: Update an existing item
#      description: Replaces all details for an existing item with the data passed in the request body
#      tags:
#        - Items
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/ItemModel'
#        required: true
#      responses:
#        204:
#          $ref: '#/components/responses/NoContentUpdate'
#        404:
#          $ref: '#/components/responses/NotFound'
#        500:
#          $ref: '#/components/responses/InternalServerError'
#
#    delete:
#      summary: Delete an existing item
#      description: Deletes an existing item from the system. This call is idempotent
#      tags:
#        - Items
#      responses:
#        204:
#          $ref: '#/components/responses/NoContentDelete'

components:
  parameters:
    orderId:
      name: orderId
      in: path
      description: Identifier for an order
      required: true
      example: 09sl3415098gplmn
      schema:
        type: string

  schemas:
    OrderModel:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        comment:
          type: string

  responses:
    Created: #201
      description: The request succeeded and created a new order
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
            required:
              - id
    NoContentUpdate: #204
      description: The request succeeded and updated an existing order
    NoContentDelete: #204
      description: The request finished processing and the order was removed or did not exist
    NotFound: #404
      description: The requested order was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Could not find an order with the specified id.
            required:
              - message

    InternalServerError: #500
      description: The server encountered an unexpected condition which prevented it from fulfilling the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An error occurred saving the order.
            required:
              - message
